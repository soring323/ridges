[
  {
    "name": "affine-cipher",
    "tests": [
      "test_encode_yes",
      "test_encode_no",
      "test_encode_omg",
      "test_encode_o_m_g",
      "test_encode_mindblowingly",
      "test_encode_numbers",
      "test_encode_deep_thought",
      "test_encode_all_the_letters",
      "test_encode_with_a_not_coprime_to_m",
      "test_decode_exercism",
      "test_decode_a_sentence",
      "test_decode_numbers",
      "test_decode_all_the_letters",
      "test_decode_with_no_spaces_in_input",
      "test_decode_with_too_many_spaces",
      "test_decode_with_a_not_coprime_to_m"
    ]
  },
  {
    "name": "beer-song",
    "tests": [
      "test_first_generic_verse",
      "test_last_generic_verse",
      "test_verse_with_2_bottles",
      "test_verse_with_1_bottle",
      "test_verse_with_0_bottles",
      "test_first_two_verses",
      "test_last_three_verses",
      "test_all_verses"
    ]
  },
  {
    "name": "book-store",
    "tests": [
      "test_only_a_single_book",
      "test_two_of_the_same_book",
      "test_empty_basket",
      "test_two_different_books",
      "test_three_different_books",
      "test_four_different_books",
      "test_five_different_books",
      "test_two_groups_of_four_is_cheaper_than_group_of_five_plus_group_of_three",
      "test_two_groups_of_four_is_cheaper_than_groups_of_five_and_three",
      "test_group_of_four_plus_group_of_two_is_cheaper_than_two_groups_of_three",
      "test_two_each_of_first_four_books_and_one_copy_each_of_rest",
      "test_two_copies_of_each_book",
      "test_three_copies_of_first_book_and_two_each_of_remaining",
      "test_three_each_of_first_two_books_and_two_each_of_remaining_books",
      "test_four_groups_of_four_are_cheaper_than_two_groups_each_of_five_and_three",
      "test_check_that_groups_of_four_are_created_properly_even_when_there_are_more_groups_of_three_than_groups_of_five",
      "test_one_group_of_one_and_four_is_cheaper_than_one_group_of_two_and_three",
      "test_one_group_of_one_and_two_plus_three_groups_of_four_is_cheaper_than_one_group_of_each_size",
      "test_two_groups_of_four_and_a_group_of_five",
      "test_shuffled_book_order"
    ]
  },
  {
    "name": "bottle-song",
    "tests": [
      "test_first_generic_verse",
      "test_last_generic_verse",
      "test_verse_with_2_bottles",
      "test_verse_with_1_bottle",
      "test_first_two_verses",
      "test_last_three_verses",
      "test_all_verses"
    ]
  },
  {
    "name": "bowling",
    "tests": [
      "test_should_be_able_to_score_a_game_with_all_zeros",
      "test_should_be_able_to_score_a_game_with_no_strikes_or_spares",
      "test_a_spare_followed_by_zeros_is_worth_ten_points",
      "test_points_scored_in_the_roll_after_a_spare_are_counted_twice",
      "test_consecutive_spares_each_get_a_one_roll_bonus",
      "test_a_spare_in_the_last_frame_gets_a_one_roll_bonus_that_is_counted_once",
      "test_a_strike_earns_ten_points_in_a_frame_with_a_single_roll",
      "test_points_scored_in_the_two_rolls_after_a_strike_are_counted_twice_as_a_bonus",
      "test_consecutive_strikes_each_get_the_two_roll_bonus",
      "test_a_strike_in_the_last_frame_gets_a_two_roll_bonus_that_is_counted_once",
      "test_rolling_a_spare_with_the_two_roll_bonus_does_not_get_a_bonus_roll",
      "test_strikes_with_the_two_roll_bonus_do_not_get_bonus_rolls",
      "test_last_two_strikes_followed_by_only_last_bonus_with_non_strike_points",
      "test_a_strike_with_the_one_roll_bonus_after_a_spare_in_the_last_frame_does_not_get_a_bonus",
      "test_all_strikes_is_a_perfect_game",
      "test_rolls_cannot_score_negative_points",
      "test_a_roll_cannot_score_more_than_10_points",
      "test_two_rolls_in_a_frame_cannot_score_more_than_10_points",
      "test_bonus_roll_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points",
      "test_two_bonus_rolls_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points",
      "test_two_bonus_rolls_after_a_strike_in_the_last_frame_can_score_more_than_10_points_if_one_is_a_strike",
      "test_the_second_bonus_rolls_after_a_strike_in_the_last_frame_cannot_be_a_strike_if_the_first_one_is_not_a_strike",
      "test_second_bonus_roll_after_a_strike_in_the_last_frame_cannot_score_more_than_10_points",
      "test_an_unstarted_game_cannot_be_scored",
      "test_an_incomplete_game_cannot_be_scored",
      "test_cannot_roll_if_game_already_has_ten_frames",
      "test_bonus_rolls_for_a_strike_in_the_last_frame_must_be_rolled_before_score_can_be_calculated",
      "test_both_bonus_rolls_for_a_strike_in_the_last_frame_must_be_rolled_before_score_can_be_calculated",
      "test_bonus_roll_for_a_spare_in_the_last_frame_must_be_rolled_before_score_can_be_calculated",
      "test_cannot_roll_after_bonus_roll_for_spare",
      "test_cannot_roll_after_bonus_rolls_for_strike"
    ]
  },
  {
    "name": "connect",
    "tests": [
      "test_an_empty_board_has_no_winner",
      "test_x_can_win_on_a_1x1_board",
      "test_o_can_win_on_a_1x1_board",
      "test_only_edges_does_not_make_a_winner",
      "test_illegal_diagonal_does_not_make_a_winner",
      "test_nobody_wins_crossing_adjacent_angles",
      "test_x_wins_crossing_from_left_to_right",
      "test_o_wins_crossing_from_top_to_bottom",
      "test_x_wins_using_a_convoluted_path",
      "test_x_wins_using_a_spiral_path"
    ]
  },
  {
    "name": "dominoes",
    "tests": [
      "test_empty_input_empty_output",
      "test_singleton_input_singleton_output",
      "test_singleton_that_can_t_be_chained",
      "test_three_elements",
      "test_can_reverse_dominoes",
      "test_can_t_be_chained",
      "test_disconnected_simple",
      "test_disconnected_double_loop",
      "test_disconnected_single_isolated",
      "test_need_backtrack",
      "test_separate_loops",
      "test_nine_elements",
      "test_separate_three_domino_loops"
    ]
  },
  {
    "name": "dot-dsl",
    "tests": [
      "test_empty_graph",
      "test_graph_with_one_node",
      "test_graph_with_one_node_with_keywords",
      "test_graph_with_one_edge",
      "test_graph_with_one_attribute",
      "test_graph_with_attributes",
      "test_malformed_graph",
      "test_malformed_graph_item",
      "test_malformed_attr",
      "test_malformed_node",
      "test_malformed_EDGE",
      "test_unknown_item"
    ]
  },
  {
    "name": "food-chain",
    "tests": [
      "test_fly",
      "test_spider",
      "test_bird",
      "test_cat",
      "test_dog",
      "test_goat",
      "test_cow",
      "test_horse",
      "test_multiple_verses",
      "test_full_song"
    ]
  },
  {
    "name": "forth",
    "tests": [
      "test_parsing_and_numbers_numbers_just_get_pushed_onto_the_stack",
      "test_parsing_and_numbers_pushes_negative_numbers_onto_the_stack",
      "test_addition_can_add_two_numbers",
      "test_addition_errors_if_there_is_nothing_on_the_stack",
      "test_addition_errors_if_there_is_only_one_value_on_the_stack",
      "test_addition_more_than_two_values_on_the_stack",
      "test_subtraction_can_subtract_two_numbers",
      "test_subtraction_errors_if_there_is_nothing_on_the_stack",
      "test_subtraction_errors_if_there_is_only_one_value_on_the_stack",
      "test_subtraction_more_than_two_values_on_the_stack",
      "test_multiplication_can_multiply_two_numbers",
      "test_multiplication_errors_if_there_is_nothing_on_the_stack",
      "test_multiplication_errors_if_there_is_only_one_value_on_the_stack",
      "test_multiplication_more_than_two_values_on_the_stack",
      "test_division_can_divide_two_numbers",
      "test_division_performs_integer_division",
      "test_division_errors_if_dividing_by_zero",
      "test_division_errors_if_there_is_nothing_on_the_stack",
      "test_division_errors_if_there_is_only_one_value_on_the_stack",
      "test_division_more_than_two_values_on_the_stack",
      "test_combined_arithmetic_addition_and_subtraction",
      "test_combined_arithmetic_multiplication_and_division",
      "test_combined_arithmetic_multiplication_and_addition",
      "test_combined_arithmetic_addition_and_multiplication",
      "test_dup_copies_a_value_on_the_stack",
      "test_dup_copies_the_top_value_on_the_stack",
      "test_dup_errors_if_there_is_nothing_on_the_stack",
      "test_drop_removes_the_top_value_on_the_stack_if_it_is_the_only_one",
      "test_drop_removes_the_top_value_on_the_stack_if_it_is_not_the_only_one",
      "test_drop_errors_if_there_is_nothing_on_the_stack",
      "test_swap_swaps_the_top_two_values_on_the_stack_if_they_are_the_only_ones",
      "test_swap_swaps_the_top_two_values_on_the_stack_if_they_are_not_the_only_ones",
      "test_swap_errors_if_there_is_nothing_on_the_stack",
      "test_swap_errors_if_there_is_only_one_value_on_the_stack",
      "test_over_copies_the_second_element_if_there_are_only_two",
      "test_over_copies_the_second_element_if_there_are_more_than_two",
      "test_over_errors_if_there_is_nothing_on_the_stack",
      "test_over_errors_if_there_is_only_one_value_on_the_stack",
      "test_user_defined_words_can_consist_of_built_in_words",
      "test_user_defined_words_execute_in_the_right_order",
      "test_user_defined_words_can_override_other_user_defined_words",
      "test_user_defined_words_can_override_built_in_words",
      "test_user_defined_words_can_override_built_in_operators",
      "test_user_defined_words_can_use_different_words_with_the_same_name",
      "test_user_defined_words_can_define_word_that_uses_word_with_the_same_name",
      "test_user_defined_words_cannot_redefine_non_negative_numbers",
      "test_user_defined_words_cannot_redefine_negative_numbers",
      "test_user_defined_words_errors_if_executing_a_non_existent_word",
      "test_case_insensitivity_dup_is_case_insensitive",
      "test_case_insensitivity_drop_is_case_insensitive",
      "test_case_insensitivity_swap_is_case_insensitive",
      "test_case_insensitivity_over_is_case_insensitive",
      "test_case_insensitivity_user_defined_words_are_case_insensitive",
      "test_case_insensitivity_definitions_are_case_insensitive"
    ]
  },
  {
    "name": "go-counting",
    "tests": [
      "test_black_corner_territory_on_5x5_board",
      "test_white_center_territory_on_5x5_board",
      "test_open_corner_territory_on_5x5_board",
      "test_a_stone_and_not_a_territory_on_5x5_board",
      "test_invalid_because_x_is_too_low_for_5x5_board",
      "test_invalid_because_x_is_too_high_for_5x5_board",
      "test_invalid_because_y_is_too_low_for_5x5_board",
      "test_invalid_because_y_is_too_high_for_5x5_board",
      "test_one_territory_is_the_whole_board",
      "test_two_territory_rectangular_board",
      "test_two_region_rectangular_board"
    ]
  },
  {
    "name": "grade-school",
    "tests": [
      "test_roster_is_empty_when_no_student_is_added",
      "test_add_a_student",
      "test_student_is_added_to_the_roster",
      "test_adding_multiple_students_in_the_same_grade_in_the_roster",
      "test_multiple_students_in_the_same_grade_are_added_to_the_roster",
      "test_cannot_add_student_to_same_grade_in_the_roster_more_than_once",
      "test_student_not_added_to_same_grade_in_the_roster_more_than_once",
      "test_adding_students_in_multiple_grades",
      "test_students_in_multiple_grades_are_added_to_the_roster",
      "test_cannot_add_same_student_to_multiple_grades_in_the_roster",
      "test_student_not_added_to_multiple_grades_in_the_roster",
      "test_students_are_sorted_by_grades_in_the_roster",
      "test_students_are_sorted_by_name_in_the_roster",
      "test_students_are_sorted_by_grades_and_then_by_name_in_the_roster",
      "test_grade_is_empty_if_no_students_in_the_roster",
      "test_grade_is_empty_if_no_students_in_that_grade",
      "test_student_not_added_to_same_grade_more_than_once",
      "test_student_not_added_to_multiple_grades",
      "test_student_not_added_to_other_grade_for_multiple_grades",
      "test_students_are_sorted_by_name_in_a_grade"
    ]
  },
  {
    "name": "grep",
    "tests": [
      "test_one_file_one_match_no_flags",
      "test_one_file_one_match_print_line_numbers_flag",
      "test_one_file_one_match_case_insensitive_flag",
      "test_one_file_one_match_print_file_names_flag",
      "test_one_file_one_match_match_entire_lines_flag",
      "test_one_file_one_match_multiple_flags",
      "test_one_file_several_matches_no_flags",
      "test_one_file_several_matches_print_line_numbers_flag",
      "test_one_file_several_matches_match_entire_lines_flag",
      "test_one_file_several_matches_case_insensitive_flag",
      "test_one_file_several_matches_inverted_flag",
      "test_one_file_no_matches_various_flags",
      "test_one_file_one_match_file_flag_takes_precedence_over_line_flag",
      "test_one_file_several_matches_inverted_and_match_entire_lines_flags",
      "test_multiple_files_one_match_no_flags",
      "test_multiple_files_several_matches_no_flags",
      "test_multiple_files_several_matches_print_line_numbers_flag",
      "test_multiple_files_one_match_print_file_names_flag",
      "test_multiple_files_several_matches_case_insensitive_flag",
      "test_multiple_files_several_matches_inverted_flag",
      "test_multiple_files_one_match_match_entire_lines_flag",
      "test_multiple_files_one_match_multiple_flags",
      "test_multiple_files_no_matches_various_flags",
      "test_multiple_files_several_matches_file_flag_takes_precedence_over_line_number_flag",
      "test_multiple_files_several_matches_inverted_and_match_entire_lines_flags"
    ]
  },
  {
    "name": "hangman",
    "tests": [
      "test_initially_9_failures_are_allowed",
      "test_initially_no_letters_are_guessed",
      "test_after_10_failures_the_game_is_over",
      "test_feeding_a_correct_letter_removes_underscores",
      "test_feeding_a_correct_letter_twice_counts_as_a_failure",
      "test_getting_all_the_letters_right_makes_for_a_win",
      "test_winning_on_last_guess_still_counts_as_a_win"
    ]
  },
  {
    "name": "list-ops",
    "tests": [
      "test_append_empty_lists",
      "test_append_list_to_empty_list",
      "test_append_empty_list_to_list",
      "test_append_non_empty_lists",
      "test_concat_empty_list",
      "test_concat_list_of_lists",
      "test_concat_list_of_nested_lists",
      "test_filter_empty_list",
      "test_filter_non_empty_list",
      "test_length_empty_list",
      "test_length_non_empty_list",
      "test_map_empty_list",
      "test_map_non_empty_list",
      "test_foldl_empty_list",
      "test_foldl_direction_independent_function_applied_to_non_empty_list",
      "test_foldl_direction_dependent_function_applied_to_non_empty_list",
      "test_foldr_empty_list",
      "test_foldr_direction_independent_function_applied_to_non_empty_list",
      "test_foldr_direction_dependent_function_applied_to_non_empty_list",
      "test_reverse_empty_list",
      "test_reverse_non_empty_list",
      "test_reverse_list_of_lists_is_not_flattened",
      "test_foldr_foldr_add_string",
      "test_reverse_reverse_mixed_types"
    ]
  },
  {
    "name": "phone-number",
    "tests": [
      "test_cleans_the_number",
      "test_cleans_numbers_with_dots",
      "test_cleans_numbers_with_multiple_spaces",
      "test_invalid_when_9_digits",
      "test_invalid_when_11_digits_does_not_start_with_a_1",
      "test_valid_when_11_digits_and_starting_with_1",
      "test_valid_when_11_digits_and_starting_with_1_even_with_punctuation",
      "test_invalid_when_more_than_11_digits",
      "test_invalid_with_letters",
      "test_invalid_with_punctuations",
      "test_invalid_if_area_code_starts_with_0",
      "test_invalid_if_area_code_starts_with_1",
      "test_invalid_if_exchange_code_starts_with_0",
      "test_invalid_if_exchange_code_starts_with_1",
      "test_invalid_if_area_code_starts_with_0_on_valid_11_digit_number",
      "test_invalid_if_area_code_starts_with_1_on_valid_11_digit_number",
      "test_invalid_if_exchange_code_starts_with_0_on_valid_11_digit_number",
      "test_invalid_if_exchange_code_starts_with_1_on_valid_11_digit_number",
      "test_area_code",
      "test_pretty_print",
      "test_pretty_print_with_full_us_phone_number"
    ]
  },
  {
    "name": "pig-latin",
    "tests": [
      "test_word_beginning_with_a",
      "test_word_beginning_with_e",
      "test_word_beginning_with_i",
      "test_word_beginning_with_o",
      "test_word_beginning_with_u",
      "test_word_beginning_with_a_vowel_and_followed_by_a_qu",
      "test_word_beginning_with_p",
      "test_word_beginning_with_k",
      "test_word_beginning_with_x",
      "test_word_beginning_with_q_without_a_following_u",
      "test_word_beginning_with_ch",
      "test_word_beginning_with_qu",
      "test_word_beginning_with_qu_and_a_preceding_consonant",
      "test_word_beginning_with_th",
      "test_word_beginning_with_thr",
      "test_word_beginning_with_sch",
      "test_word_beginning_with_yt",
      "test_word_beginning_with_xr",
      "test_y_is_treated_like_a_consonant_at_the_beginning_of_a_word",
      "test_y_is_treated_like_a_vowel_at_the_end_of_a_consonant_cluster",
      "test_y_as_second_letter_in_two_letter_word",
      "test_a_whole_phrase"
    ]
  },
  {
    "name": "poker",
    "tests": [
      "test_single_hand_always_wins",
      "test_highest_card_out_of_all_hands_wins",
      "test_a_tie_has_multiple_winners",
      "test_multiple_hands_with_the_same_high_cards_tie_compares_next_highest_ranked_down_to_last_card",
      "test_winning_high_card_hand_also_has_the_lowest_card",
      "test_one_pair_beats_high_card",
      "test_highest_pair_wins",
      "test_both_hands_have_the_same_pair_high_card_wins",
      "test_two_pairs_beats_one_pair",
      "test_both_hands_have_two_pairs_highest_ranked_pair_wins",
      "test_both_hands_have_two_pairs_with_the_same_highest_ranked_pair_tie_goes_to_low_pair",
      "test_both_hands_have_two_identically_ranked_pairs_tie_goes_to_remaining_card_kicker",
      "test_both_hands_have_two_pairs_that_add_to_the_same_value_win_goes_to_highest_pair",
      "test_two_pairs_first_ranked_by_largest_pair",
      "test_three_of_a_kind_beats_two_pair",
      "test_both_hands_have_three_of_a_kind_tie_goes_to_highest_ranked_triplet",
      "test_with_multiple_decks_two_players_can_have_same_three_of_a_kind_ties_go_to_highest_remaining_cards",
      "test_a_straight_beats_three_of_a_kind",
      "test_aces_can_end_a_straight_10_j_q_k_a",
      "test_aces_can_start_a_straight_a_2_3_4_5",
      "test_aces_cannot_be_in_the_middle_of_a_straight_q_k_a_2_3",
      "test_both_hands_with_a_straight_tie_goes_to_highest_ranked_card",
      "test_even_though_an_ace_is_usually_high_a_5_high_straight_is_the_lowest_scoring_straight",
      "test_flush_beats_a_straight",
      "test_both_hands_have_a_flush_tie_goes_to_high_card_down_to_the_last_one_if_necessary",
      "test_full_house_beats_a_flush",
      "test_both_hands_have_a_full_house_tie_goes_to_highest_ranked_triplet",
      "test_with_multiple_decks_both_hands_have_a_full_house_with_the_same_triplet_tie_goes_to_the_pair",
      "test_four_of_a_kind_beats_a_full_house",
      "test_both_hands_have_four_of_a_kind_tie_goes_to_high_quad",
      "test_with_multiple_decks_both_hands_with_identical_four_of_a_kind_tie_determined_by_kicker",
      "test_straight_flush_beats_four_of_a_kind",
      "test_aces_can_end_a_straight_flush_10_j_q_k_a",
      "test_aces_can_start_a_straight_flush_a_2_3_4_5",
      "test_aces_cannot_be_in_the_middle_of_a_straight_flush_q_k_a_2_3",
      "test_both_hands_have_a_straight_flush_tie_goes_to_highest_ranked_card",
      "test_even_though_an_ace_is_usually_high_a_5_high_straight_flush_is_the_lowest_scoring_straight_flush"
    ]
  },
  {
    "name": "pov",
    "tests": [
      "test_results_in_the_same_tree_if_the_input_tree_is_a_singleton",
      "test_can_reroot_a_tree_with_a_parent_and_one_sibling",
      "test_can_reroot_a_tree_with_a_parent_and_many_siblings",
      "test_can_reroot_a_tree_with_new_root_deeply_nested_in_tree",
      "test_moves_children_of_the_new_root_to_same_level_as_former_parent",
      "test_can_reroot_a_complex_tree_with_cousins",
      "test_errors_if_target_does_not_exist_in_a_singleton_tree",
      "test_errors_if_target_does_not_exist_in_a_large_tree",
      "test_can_find_path_to_parent",
      "test_can_find_path_to_sibling",
      "test_can_find_path_to_cousin",
      "test_can_find_path_not_involving_root",
      "test_can_find_path_from_nodes_other_than_x",
      "test_errors_if_destination_does_not_exist",
      "test_errors_if_source_does_not_exist"
    ]
  },
  {
    "name": "proverb",
    "tests": [
      "test_zero_pieces",
      "test_one_piece",
      "test_two_pieces",
      "test_three_pieces",
      "test_full_proverb",
      "test_four_pieces_modernized",
      "test_an_optional_qualifier_can_be_added",
      "test_an_optional_qualifier_in_the_final_consequences"
    ]
  },
  {
    "name": "react",
    "tests": [
      "test_input_cells_have_a_value",
      "test_an_input_cell_s_value_can_be_set",
      "test_compute_cells_calculate_initial_value",
      "test_compute_cells_take_inputs_in_the_right_order",
      "test_compute_cells_update_value_when_dependencies_are_changed",
      "test_compute_cells_can_depend_on_other_compute_cells",
      "test_compute_cells_fire_callbacks",
      "test_callback_cells_only_fire_on_change",
      "test_callbacks_do_not_report_already_reported_values",
      "test_callbacks_can_fire_from_multiple_cells",
      "test_callbacks_can_be_added_and_removed",
      "test_removing_a_callback_multiple_times_doesn_t_interfere_with_other_callbacks",
      "test_callbacks_should_only_be_called_once_even_if_multiple_dependencies_change",
      "test_callbacks_should_not_be_called_if_dependencies_change_but_output_value_doesn_t_change"
    ]
  },
  {
    "name": "rest-api",
    "tests": [
      "test_no_users",
      "test_add_user",
      "test_get_single_user",
      "test_both_users_have_0_balance",
      "test_borrower_has_negative_balance",
      "test_lender_has_negative_balance",
      "test_lender_owes_borrower",
      "test_lender_owes_borrower_less_than_new_loan",
      "test_lender_owes_borrower_same_as_new_loan"
    ]
  },
  {
    "name": "robot-name",
    "tests": [
      "test_has_name",
      "test_name_sticks",
      "test_different_robots_have_different_names",
      "test_reset_name"
    ]
  },
  {
    "name": "scale-generator",
    "tests": [
      "test_chromatic_scale_with_sharps",
      "test_chromatic_scale_with_flats",
      "test_simple_major_scale",
      "test_major_scale_with_sharps",
      "test_major_scale_with_flats",
      "test_minor_scale_with_sharps",
      "test_minor_scale_with_flats",
      "test_dorian_mode",
      "test_mixolydian_mode",
      "test_lydian_mode",
      "test_phrygian_mode",
      "test_locrian_mode",
      "test_harmonic_minor",
      "test_octatonic",
      "test_hexatonic",
      "test_pentatonic",
      "test_enigmatic"
    ]
  },
  {
    "name": "sgf-parsing",
    "tests": [
      "test_empty_input",
      "test_tree_with_no_nodes",
      "test_node_without_tree",
      "test_node_without_properties",
      "test_single_node_tree",
      "test_multiple_properties",
      "test_properties_without_delimiter",
      "test_all_lowercase_property",
      "test_upper_and_lowercase_property",
      "test_two_nodes",
      "test_two_child_trees",
      "test_multiple_property_values",
      "test_within_property_values_whitespace_characters_such_as_tab_are_converted_to_spaces",
      "test_within_property_values_newlines_remain_as_newlines",
      "test_escaped_closing_bracket_within_property_value_becomes_just_a_closing_bracket",
      "test_escaped_backslash_in_property_value_becomes_just_a_backslash",
      "test_opening_bracket_within_property_value_doesn_t_need_to_be_escaped",
      "test_semicolon_in_property_value_doesn_t_need_to_be_escaped",
      "test_parentheses_in_property_value_don_t_need_to_be_escaped",
      "test_escaped_tab_in_property_value_is_converted_to_space",
      "test_escaped_newline_in_property_value_is_converted_to_nothing_at_all",
      "test_escaped_t_and_n_in_property_value_are_just_letters_not_whitespace",
      "test_mixing_various_kinds_of_whitespace_and_escaped_characters_in_property_value"
    ]
  },
  {
    "name": "simple-linked-list",
    "tests": [
      "test_empty_list_has_len_zero",
      "test_singleton_list_has_len_one",
      "test_non_empty_list_has_correct_len",
      "test_error_on_empty_list_head",
      "test_singleton_list_has_head",
      "test_non_empty_list_has_correct_head",
      "test_can_push_to_non_empty_list",
      "test_pushing_to_empty_list_changes_head",
      "test_can_pop_from_non_empty_list",
      "test_pop_from_singleton_list_removes_head",
      "test_error_on_empty_list_pop",
      "test_push_and_pop",
      "test_singleton_list_head_has_no_next",
      "test_non_empty_list_traverse",
      "test_empty_linked_list_to_list_is_empty",
      "test_singleton_linked_list_to_list_list_with_singular_element",
      "test_non_empty_linked_list_to_list_is_list_with_all_elements",
      "test_reversed_empty_list_is_empty_list",
      "test_reversed_singleton_list_is_same_list",
      "test_reverse_non_empty_list"
    ]
  },
  {
    "name": "transpose",
    "tests": [
      "test_empty_string",
      "test_two_characters_in_a_row",
      "test_two_characters_in_a_column",
      "test_simple",
      "test_single_line",
      "test_first_line_longer_than_second_line",
      "test_second_line_longer_than_first_line",
      "test_mixed_line_length",
      "test_square",
      "test_rectangle",
      "test_triangle",
      "test_jagged_triangle"
    ]
  },
  {
    "name": "tree-building",
    "tests": [
      "test_empty_list_input",
      "test_one_node",
      "test_three_nodes_in_order",
      "test_three_nodes_in_reverse_order",
      "test_more_than_two_children",
      "test_binary_tree",
      "test_unbalanced_tree",
      "test_root_node_has_parent",
      "test_no_root_node",
      "test_non_continuous",
      "test_cycle_directly",
      "test_cycle_indirectly",
      "test_higher_id_parent_of_lower_id"
    ]
  },
  {
    "name": "two-bucket",
    "tests": [
      "test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_one",
      "test_measure_using_bucket_one_of_size_3_and_bucket_two_of_size_5_start_with_bucket_two",
      "test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_one",
      "test_measure_using_bucket_one_of_size_7_and_bucket_two_of_size_11_start_with_bucket_two",
      "test_measure_one_step_using_bucket_one_of_size_1_and_bucket_two_of_size_3_start_with_bucket_two",
      "test_measure_using_bucket_one_of_size_2_and_bucket_two_of_size_3_start_with_bucket_one_and_end_with_bucket_two",
      "test_not_possible_to_reach_the_goal",
      "test_with_the_same_buckets_but_a_different_goal_then_it_is_possible",
      "test_goal_larger_than_both_buckets_is_impossible"
    ]
  },
  {
    "name": "variable-length-quantity",
    "tests": [
      "test_zero",
      "test_arbitrary_single_byte",
      "test_largest_single_byte",
      "test_smallest_double_byte",
      "test_arbitrary_double_byte",
      "test_largest_double_byte",
      "test_smallest_triple_byte",
      "test_arbitrary_triple_byte",
      "test_largest_triple_byte",
      "test_smallest_quadruple_byte",
      "test_arbitrary_quadruple_byte",
      "test_largest_quadruple_byte",
      "test_smallest_quintuple_byte",
      "test_arbitrary_quintuple_byte",
      "test_maximum_32_bit_integer_input",
      "test_two_single_byte_values",
      "test_two_multi_byte_values",
      "test_many_multi_byte_values",
      "test_one_byte",
      "test_two_bytes",
      "test_three_bytes",
      "test_four_bytes",
      "test_maximum_32_bit_integer",
      "test_incomplete_sequence_causes_error",
      "test_incomplete_sequence_causes_error_even_if_value_is_zero",
      "test_multiple_values"
    ]
  },
  {
    "name": "wordy",
    "tests": [
      "test_just_a_number",
      "test_addition",
      "test_more_addition",
      "test_addition_with_negative_numbers",
      "test_large_addition",
      "test_subtraction",
      "test_multiplication",
      "test_division",
      "test_multiple_additions",
      "test_addition_and_subtraction",
      "test_multiple_subtraction",
      "test_subtraction_then_addition",
      "test_multiple_multiplication",
      "test_addition_and_multiplication",
      "test_multiple_division",
      "test_unknown_operation",
      "test_non_math_question",
      "test_reject_problem_missing_an_operand",
      "test_reject_problem_with_no_operands_or_operators",
      "test_reject_two_operations_in_a_row",
      "test_reject_two_numbers_in_a_row",
      "test_reject_postfix_notation",
      "test_reject_prefix_notation",
      "test_missing_operation",
      "test_missing_number"
    ]
  },
  {
    "name": "zebra-puzzle",
    "tests": [
      "test_resident_who_drinks_water",
      "test_resident_who_owns_zebra"
    ]
  },
  {
    "name": "zipper",
    "tests": [
      "test_data_is_retained",
      "test_left_right_and_value",
      "test_dead_end",
      "test_tree_from_deep_focus",
      "test_traversing_up_from_top",
      "test_left_right_and_up",
      "test_test_ability_to_descend_multiple_levels_and_return",
      "test_set_value",
      "test_set_value_after_traversing_up",
      "test_set_left_with_leaf",
      "test_set_right_with_null",
      "test_set_right_with_subtree",
      "test_set_value_on_deep_focus",
      "test_different_paths_to_same_zipper"
    ]
  }
]